# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  inputs,
  lib,
  modulesPath,
  nixcfgs,
  pkgs,
  ...
}:
{
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")

    inputs.nixos-hardware.nixosModules.framework-12-13th-gen-intel
  ];

  # Use the systemd-boot EFI boot loader.
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;

  boot.initrd.availableKernelModules = [
    "xhci_pci"
    "nvme"
  ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  fileSystems =
    let
      mkBtrfs = subvol: {
        device = "/dev/disk/by-uuid/161eadfd-317d-4c24-8037-6a7542e5740d";
        fsType = "btrfs";
        options = [
          "subvol=${subvol}"
          "compress=zstd"
          "noatime"
        ];
      };
      neededForBoot = {
        neededForBoot = true;
      };
    in
    {
      "/boot" = {
        device = "/dev/disk/by-uuid/13FC-2CDA";
        fsType = "vfat";
        options = [
          "fmask=0077"
          "dmask=0077"
        ];
      };

      "/" = mkBtrfs "root";
      "/home" = mkBtrfs "home";
      "/nix" = mkBtrfs "nix";
      "/var/log" = (mkBtrfs "log") // neededForBoot;
    }
    // (
      let
        inherit (nixcfgs) persist persistVol;
      in
      {
        ${persist} = (mkBtrfs persistVol) // neededForBoot;
      }
    );

  boot.initrd.luks.devices."enc".device = "/dev/disk/by-uuid/4e470f57-9e0d-4ac8-8be8-0a336a805faf";

  swapDevices = [
    { device = "/dev/disk/by-uuid/8f2ba4d1-802a-4956-83de-f24f8ee82e5d"; }
  ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp0s20f3.useDHCP = lib.mkDefault true;

  # Set your system kind (needed for flakes)
  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;

  boot.kernelPackages = pkgs.linuxPackages_latest;
}
